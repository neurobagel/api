#!/bin/bash
#
# ARG_HELP([Upload JSONLD and Turtle data to a Neurobagel graph])
# ARG_POSITIONAL_SINGLE([dir],[Path to directory containing .jsonld and/or .ttl files. ALL .jsonld and .ttl files in this directory will be uploaded.])
# ARG_POSITIONAL_SINGLE([graph-url],[Host and port at which to access the graph database to add data to (e.g., localhost:7200)])
# ARG_POSITIONAL_SINGLE([graph-db],[Name of graph database to add data to])
# ARG_POSITIONAL_SINGLE([user],[Username for graph database access])
# ARG_POSITIONAL_SINGLE([password],[Password for graph database user])
# ARG_OPTIONAL_BOOLEAN([clear-data],[],[Whether or not to first clear all existing data from the graph database],[off])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_clear_data="off"


print_help()
{
	printf '%s\n' "Upload JSONLD and Turtle data to a Neurobagel graph"
	printf 'Usage: %s [-h|--help] [--(no-)clear-data] <dir> <graph-url> <graph-db> <user> <password>\n' "$0"
	printf '\t%s\n' "<dir>: Path to directory containing .jsonld and/or .ttl files. ALL .jsonld and .ttl files in this directory will be uploaded."
	printf '\t%s\n' "<graph-url>: Host and port at which to access the graph database to add data to (e.g., localhost:7200)"
	printf '\t%s\n' "<graph-db>: Name of graph database to add data to"
	printf '\t%s\n' "<user>: Username for graph database access"
	printf '\t%s\n' "<password>: Password for graph database user"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "--clear-data, --no-clear-data: Whether or not to first clear all existing data from the graph database (off by default)"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			--no-clear-data|--clear-data)
				_arg_clear_data="on"
				test "${1:0:5}" = "--no-" && _arg_clear_data="off"
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'dir', 'graph-url', 'graph-db', 'user' and 'password'"
	test "${_positionals_count}" -ge 5 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 5 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 5 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_dir _arg_graph_url _arg_graph_db _arg_user _arg_password "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Reassign positional args to more readable named variables (https://argbash.readthedocs.io/en/latest/guide.html#using-parsing-results)
jsonld_dir=$_arg_dir
user=$_arg_user
password=$_arg_password
graph_db=$_arg_graph_db
graph_url=$_arg_graph_url
clear_data=$_arg_clear_data  # value is either on or off (https://argbash.readthedocs.io/en/stable/guide.html#optional-arguments)

DELETE_TRIPLES_QUERY="
DELETE { 
	?s ?p ?o .
} WHERE {
	?s ?p ?o .
}"


# Clear existing data in graph database if requested
if [ "$clear_data" = "on" ]; then
	echo -e "\nClearing existing data from ${graph_db}..."

	curl -u "${user}:${password}" -X POST http://${graph_url}/${graph_db}/update \
		-H "Content-Type: application/sparql-update" \
		--data-binary "${DELETE_TRIPLES_QUERY}"

	echo -e "Done clearing existing data from ${graph_db}.\n"
fi


# Add data to specified graph database
echo "Uploading data from ${jsonld_dir} to ${graph_db}..."

for db in ${jsonld_dir}/*.jsonld; do
	curl -u "${user}:${password}" -i -X POST http://${graph_url}/${graph_db} \
	-H "Content-Type: application/ld+json" \
	--data-binary @${db}
done

for file in ${jsonld_dir}/*.ttl; do
	curl -u "${user}:${password}" -i -X POST http://${graph_url}/${graph_db} \
	-H "Content-Type: text/turtle" \
	--data-binary @${file}
done

echo "Finished uploading data from ${jsonld_dir} to ${graph_db}"

# ] <-- needed because of Argbash
